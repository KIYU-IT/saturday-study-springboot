# 토요스터디 - 디자인 패턴 예제 프로젝트 개발 가이드라인

## 🎯 프로젝트 목적
- 디자인 패턴 학습 및 실습을 위한 Spring Boot 예제 프로젝트
- 실생활 예제(서브웨이 주문 시스템)를 통한 직관적 이해 제공
- 각 패턴의 구체적 구현과 활용법 시연

## 📝 코딩 원칙

### 1. 주석 및 문서화
- **모든 클래스에 JavaDoc 작성 필수**
  - 패턴 역할, 책임, 사용 목적 명시
  - `@author KIYU-IT` 태그 포함
  - `@date` 태그로 작성일 명시
- **복잡한 메서드에 상세 주석 작성**
- **패턴별 README.md 문서 `/docs` 디렉터리에 작성**

### 2. 패키지 구조
```
kr.co.kiyu.designpatterns.{패턴명}/
├── model/          # DTO, 도메인 객체
│   ├── dto/
│   └── type/       # Enum 타입들
├── builder/        # 빌더 관련 클래스
├── handler/        # 핸들러 관련 클래스  
├── command/        # 커맨드 관련 클래스
├── service/        # 비즈니스 로직
└── order/          # 컨트롤러 (웹 엔드포인트)
```

### 3. 네이밍 규칙
- **클래스명**: 역할이 명확히 드러나도록 (`SubwaySandwichBuilder`)
- **메서드명**: 동사로 시작, 의도가 명확하도록 (`buildChickenTeriyaki`)
- **변수명**: 의미있는 이름 사용 (`totalPrice`, `menuName`)
- **패턴 구현체**: 패턴명 포함 (`ByChainOfResponsibility` 접미사 등)

### 4. 실생활 예제 원칙
- **서브웨이 주문 시스템**을 기본 도메인으로 활용
- **직관적이고 친숙한 개념** 사용 (빵, 치즈, 야채, 소스 등)
- **실제 비즈니스 규칙** 반영 (소스 최대 3가지, 치즈 수량 제한 등)
- **시각적 출력** 제공 (HTML 형태의 주문 결과)

### 5. Spring Boot 구현 원칙
- **@Component, @Service, @RestController** 적절히 활용
- **Lombok** 활용으로 보일러플레이트 코드 최소화
- **생성자 주입** 방식 사용 (`@RequiredArgsConstructor`)
- **로깅** 적극 활용 (`@Slf4j`)

### 6. API 설계 원칙
- **Swagger/OpenAPI** 문서화 필수 (`@Schema` 어노테이션)
- **HTTP 메서드** 적절히 활용 (GET for 조회, POST for 생성)
- **RESTful** 엔드포인트 설계
- **HTML 응답** 제공으로 시각적 결과 확인 가능

### 7. 테스트 및 품질
- **각 패턴별 동작 확인** 가능한 엔드포인트 제공
- **예외 처리** 적절히 구현
- **동기/비동기** 처리 비교 예제 제공

## 🚀 새로운 패턴 추가 시 체크리스트
- [ ] 패키지 구조 준수
- [ ] JavaDoc 주석 작성
- [ ] 실생활 예제로 구현
- [ ] Spring Boot 컴포넌트로 등록
- [ ] REST API 엔드포인트 제공
- [ ] Swagger 문서화
- [ ] `/docs/{패턴명}.md` 문서 작성
- [ ] 시각적 출력 (HTML) 제공
- [ ] 로깅 메시지 추가

## 📚 문서 작성 가이드
- **각 패턴마다 `/docs` 디렉터리에 마크다운 문서 생성**
- **패턴 설명, 구현 예제, API 사용법 포함**
- **다이어그램 및 코드 예제 제공**
- **실행 결과 스크린샷 또는 예시 포함**

## 🔄 지속적 개선
- **코드 리뷰** 시 위 원칙 준수 확인
- **새로운 패턴 추가** 시 기존 구조와의 일관성 유지
- **문서 업데이트** 지속적 수행 